#!/usr/bin/env python

import sys, re, os
from pprint import pprint
from fnmatch import fnmatch
from DVCode.Tools.general import bool_from_argv, touch
from DVCode.Tools.CondorTools import cs_dirs_from_argv, cs_published
from DVCode.Tools.CRAB3Tools import crab_dirs_from_argv, crab_get_output_dir, crab_output_files
from DVCode.Tools import colors, eos

forget_logs = bool_from_argv('forget_logs')

cs_dirs = cs_dirs_from_argv()
cr_dirs = crab_dirs_from_argv()
all_dirs = cr_dirs + cs_dirs

if not all_dirs:
    print 'usage: mrmeos wd [wd2 ...]'
    sys.exit(1)

if cs_dirs and forget_logs:
    print colors.yellow('forget_logs does nothing for condor dirs')

def do(cmd):
    print cmd
    os.system(cmd)

for wd in cr_dirs + cs_dirs:
    is_cr = wd in cr_dirs

    print colors.bold(wd)
    if os.path.isfile(os.path.join(wd, 'meosrmed')):
        if not os.path.isfile(os.path.join(wd, 'meosrmed_finished')):
            print colors.red('meosrmed but no _finished?')
        else:
            print 'already meosrmed, skipping'
            continue

    touch(os.path.join(wd, 'meosrmed'))
    touch(os.path.join(wd, 'meosrmed_started'))

    if is_cr:
        awd = os.path.abspath(wd)
        output_dir = crab_get_output_dir(wd)
        print output_dir
        dn = os.path.dirname(output_dir)
        bn = os.path.basename(output_dir)
        if not forget_logs:
            log_dirs = []
            for nd in eos.glob(output_dir, '????'):
                log_dirs.extend(eos.glob(os.path.join(output_dir, nd), 'log'))
            do('cd /eos/uscms%s && tar --remove-files -cf %s/cmsRun_logs.tar ' % (dn, awd) + ' '.join(os.path.relpath(ld, dn) for ld in log_dirs) + ' && cd -')
        do('cd /eos/uscms%s && rm -r %s && cd -' % (dn, bn))
    else:
        dirs = set()
        for fn in cs_published(wd):
            assert fn.startswith(eos.url)
            fn = fn.replace(eos.url, '')
            dn = os.path.dirname(fn)
            bn = os.path.basename(dn)
            assert fnmatch(bn, '????')
            dirs.add(os.path.dirname(dn))
        for d in dirs:
            do('cd /eos/uscms%s && rm -r %s && cd -' % (os.path.dirname(d), os.path.basename(d)))
        
    touch(os.path.join(wd, 'meosrmed_finished'))


    
'''
fn_re = re.compile(r'(%s.*\.root)' % eos.url)

groups = defaultdict(list)
for x in sys.argv[1:]:
    if x.endswith('.haddlog'):
        group = x.split('.root')[0]
        groups[group].append(x)
groups = dict(groups)

print 'groups:'
pprint(groups)
print

for group, haddlog_fns in groups.iteritems():
    to_rm = []
    for haddlog_fn in haddlog_fns:
        for line in open(haddlog_fn):
            mo = fn_re.search(line)
            if mo:
                to_rm.append(mo.group(1))

    log_dirs = [os.path.join(x, 'log') for x in sorted(set([os.path.dirname(x) for x in to_rm]))]
    log_tar_fn = group + '.logs.tgz'

    print group, len(to_rm)
    print 'to rm:'
    pprint(to_rm)
    print 'log dirs to tar to %s:' % log_tar_fn
    pprint(log_dirs)

    if raw_input('ok?') == 'y':
        pass

    print

'''

'''
        pprint(
        if 
        fns = eos.glob(output_dir, '
        def clean(orig_fns):
            fns = []
            for fn in orig_fns:
                assert fn.startswith(eos.global_url)
                fns.append(fn.replace(eos.global_url, ''))
            return fns

        fns = clean(crab_output_files(wd))

        if rm_logs:
            log_fns = clean(crab_output_files(wd, logs=True))
            

        if rm_failed:
            failed_dirs = []
            for d in sorted(set(os.path.dirname(fn) for fn in fns)):
                failed_dirs.extend(eos.glob(d, 'failed'))
'''
