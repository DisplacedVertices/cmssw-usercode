#!/usr/bin/env python

import os
from sys import argv, exit
from JMTucker.Tools.CRAB3ToolsBase import crab_dirs_from_argv, crab_get_output_dir, crab_print_requestcache
from JMTucker.Tools.CRAB3ToolsSh import crab_get_njobs_from_log
from JMTucker.Tools import colors

dirs = crab_dirs_from_argv()
verbose = True

def simple_cmd_ex(cmd):
    if verbose:
        print colors.bold(cmd)
    code = os.system(cmd)
    if verbose:
        color = colors.boldred if code != 0 else colors.boldgreen
        print color('exit code: %s' % code)
        print

def simple_cmd(cmd_fmt):
    if '%s' not in cmd_fmt:
        simple_cmd_ex(cmd_fmt)
    else:
        for d in dirs:
            simple_cmd_ex(cmd_fmt % d)

def simple_fcn(fcn):
    for d in dirs:
        if verbose:
            print colors.bold(d)
        x = fcn(d)
        if x is not None:
            print x
        if verbose:
            print

cmds = {
    'st':
        "simple_cmd('crab status -d %s')",
    'stlong':
        "simple_cmd('crab status --long -d %s')",
    'rq':
        "simple_fcn(crab_print_requestcache)",
    'cf':
        "simple_cmd('tar -Oxf %s/inputs/debugFiles.tgz debug/crabConfig.py')",
    'kl':
        "simple_cmd('crab kill -d %s')",
    'od':
        "simple_fcn(crab_get_output_dir)",
    'out':
        "simple_cmd('crab out -d %s --xrootd')",
    'get':
        "simple_cmd('crab out -d %s')",
    'res':
        "simple_cmd('crab resubmit -d %s')",
    'respub':
        "simple_cmd('crab resubmit --publication -d %s')",
    'rep':
        "simple_cmd('crab report -d %s')",
    'hl':
        "simple_cmd('tar --remove-files -czf haddlogs.tgz *.haddlog*')",
    'bd':
        "simple_cmd('tar --remove-files -czf batchdirs.tgz condor_* crab* ex_*')",
    'ds':
        "simple_cmd('grep \"Output dataset:\" %s/crab.log | tail -1')",
    'web':
        "simple_cmd('grep \"Task URL to use for HELP\" %s/crab.log | tail -n 1 | sed s/.\*http/http/')",
    'njobs':
        "simple_fcn(crab_get_njobs_from_log)",
    }

def help():
    print 'available commands:\n'
    for cmd in sorted(cmds):
        print '%-10s: %s' % (cmd, cmds[cmd].replace('simple_',''))
    print '\ncmd (shell command(s)) is executed for each crab working dir in argv if %s is in the cmd. (%s is replaced with the working dir.) Otherwise, the command is run once.'
    print 'fcn (part of CRABTools library) is called for each crab working dir in argv. The argument to the fcn is the working dir.'

if 'help' in argv or '-h' in argv or '--help' in argv:
    help()
else:
    ok = False
    for cmd in cmds:
        if cmd in argv:
            exec cmds[cmd]
            ok = True
    if not ok:
        help()
        print "didn't understand command, argv was %r" % argv
        exit(1)
