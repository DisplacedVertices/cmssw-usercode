#!/usr/bin/env python

import sys, os, argparse, imp
from DVCode.Tools.CRAB3ToolsBase import crabify_list
from DVCode.Tools.CondorTools import *
from DVCode.Tools.general import touch
from DVCode.Tools import colors

parser = argparse.ArgumentParser(description='cs_status: run cs_analyze on CondorSubmitter directories')
parser.add_argument('condor_dir', nargs='+')
parser.add_argument('-q', '--quiet', action='store_false', dest='verbose')
parser.add_argument('-d', '--include-done', action='store_true', help='include done: do not skip dirs with mmon_done marker file')
parser.add_argument('-l', '--list-done', action='store_true', help='list done dirs at end (may also want to --include-done)')
parser.add_argument('-r', '--resubmit', action='store_true', help='resubmit jobs that failed because of xrdcp problems')
parser.add_argument('-a', '--resubmit-all', action='store_true', help='resubmit all jobs that failed  (no check on exit code)')
parser.add_argument('-k', '--resubmit-killed', action='store_true', help='resubmit killed: resubmit all killed jobs (with no check on reason)')
parser.add_argument('--test-file-errors', action='store_true', help='test files with opening errors')
parser.add_argument('--no-file-errors', action='store_false', dest='print_file_errors', help='do not print files associated with opening errors')
parser.add_argument('--outputfile-callback', metavar='python_fn', help='%(metavar)s defines a single function named outputfile_callback(fn, jobnum), which returns whether the outputfile is valid.')
options = parser.parse_args()

if options.resubmit_all:
    options.resubmit = True

if options.outputfile_callback:
    sys.path.insert(0, os.path.abspath(os.path.dirname(options.outputfile_callback)))
    module = imp.load_source('dummy', options.outputfile_callback)
    options.outputfile_callback = module.outputfile_callback

wds = cs_dirs(options.condor_dir)
ml = max(len(wd) for wd in wds) + 3
fmt = '%' + str(ml) + 's %10s | %10s %10s %10s %10s %10s'

def safe_to_resubmit(r):
    return options.resubmit_all or \
        r in [147,84,92]  # xrdcp problem, file open error, fallback file open error

def return_code(r):
    if r == 147:
        return 'xrdcp problem'
    else:
        return 'Exit %i' % r

def z(n):
    return '-' if n == 0 else str(n)

def header():
    print colors.bold(fmt % ('dir'.ljust(ml), 'njobs', 'done', 'idle', 'run', 'killed', 'problem'))
header()

sums = [0]*6
done = []

for wd in wds:
    if not options.include_done and is_cs_done(wd):
        continue

    ana = cs_analyze(wd, options.outputfile_callback)

    for i in xrange(6):
        sums[i] += ana.ns[i]

    color = colors.cyan
    if ana.nprobs:
        color = colors.magenta
    elif ana.nkilled:
        color = colors.yellow
    elif ana.ndone == ana.njobs:
        done.append(wd)
        color = colors.green
        set_cs_done(wd)
    
    print color(fmt % (wd.ljust(ml), z(ana.njobs), z(ana.ndone), z(ana.nidle), z(ana.nrun), z(ana.nkilled), z(ana.nprobs))), 
    if ana.nprobs:
        print ' :', colors.magenta(crabify_list(ana.probs())),
    if ana.nkilled:
        print ' :', colors.yellow(crabify_list(ana.killed())),
    print

    if ana.nprobs:
        if options.verbose or options.resubmit:
            for r, l in ana.by_exit.iteritems():
                print '  %s:' % return_code(r), crabify_list(l)
            for e, l in ana.by_exception.iteritems():
                print '  %s:' % e, crabify_list(l)
                if options.print_file_errors and e in ('FileOpenError', 'FileReadError'):
                    for j in sorted(l):
                        fn = cs_last_input_file(wd, j)
                        print '    job %3i: %s' % (j, fn)
                        if options.test_file_errors:
                            os.system('xrdcp -f root://cmsxrootd.fnal.gov/%s /dev/null' % fn)

        if options.resubmit:
            to_resubmit = []
            for r, l in ana.by_exit.iteritems():
                if safe_to_resubmit(r):
                    to_resubmit.extend(l)
            if to_resubmit:
                cl = crabify_list(l)
                print '  resubmit these:', cl
                os.system('cs_resubmit %s %s' % (wd, cl))

    if ana.nkilled and options.resubmit_killed:
        cl = crabify_list(ana.killed())
        print '  resubmit these:', cl
        os.system('cs_resubmit %s %s' % (wd, cl))

header()
print colors.bold(fmt % (('totals'.ljust(ml),) + tuple(sums)))

if options.list_done:
    print '\nthese are done:', ' '.join(done)
if len(done) == len(wds):
    print '\nAll done!'
