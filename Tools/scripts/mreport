#!/usr/bin/env python

import os, sys
from itertools import combinations
from pprint import pprint
from FWCore.PythonUtilities.LumiList import LumiList
from DVCode.Tools.CMSSWTools import json_path
from DVCode.Tools.CRAB3Tools import crab_command, crab_dirs_from_argv
from DVCode.Tools.CondorTools import cs_dirs_from_argv, cs_report
from DVCode.Tools.DBS import ll_for_dataset
from DVCode.Tools import Samples
from DVCode.Tools import colors

partial = 'partial' in sys.argv

def ll2str(ll):
    return str(ll).replace('\n', ' ')

def check_and_print_diff(a,b):
    oa = eval(a)
    ob = eval(b)
    if oa.compactList != ob.compactList:
        print colors.red('%s != %s' % (a, b))
        print '  %s - %s:' % (a,b), ll2str(oa-ob)
        print '  %s - %s:' % (b,a), ll2str(ob-oa)
    else:
        print colors.green('%s == %s' % (a,b))

miniaod = 'miniaod' in sys.argv

pc = 100
if '10pc' in sys.argv:
    pc = 10
elif '1pc' in sys.argv:
    pc = 1

ll_alls = []
for is_crab, wds in (True, crab_dirs_from_argv()), (False, cs_dirs_from_argv()):
    for wd in wds:
        print colors.bold(wd)
        if not is_crab:
            ll_alls.append((wd, cs_report(wd, partial)))
        else:
            sample = Samples.sample_from_end_string(Samples, wd)
            if miniaod:
                sample.set_curr_dataset('miniaod')
            json = sample.json
            if pc == 10:
                json = sample.json_10pc
            elif pc == 1:
                json = sample.json_1pc
            goodLumis = LumiList(json)

            expected_files = [os.path.join(wd, 'results', x) for x in ['processedLumis.json']]
            if any(not os.path.isfile(x) for x in expected_files):
                print 'running crab report'
                report = crab_command('report', dir=wd) 
                #pprint(report)
            else:
                print 'using already-made crab report jsons'

            # check a bunch of crap since I don't trust crab--except now it doesn't write all the crap I used to check
            inputDatasetLumisDBS_fn = os.path.join(wd, 'results/inputDatasetLumisDBS.json')
            if not os.path.isfile(inputDatasetLumisDBS_fn):
                print 'getting LL from DBS for %s' % sample.dataset
                inputDatasetLumisDBS = ll_for_dataset(sample.dataset)
                inputDatasetLumisDBS.writeJSON(inputDatasetLumisDBS_fn)
            else:
                print 'using already-made LL from DBS'
                inputDatasetLumisDBS = LumiList(inputDatasetLumisDBS_fn)

            goodInputDatasetLumisDBS = goodLumis & inputDatasetLumisDBS

            processedLumis = LumiList(os.path.join(wd, 'results/processedLumis.json'))
            ll_alls.append((wd, processedLumis))

            check_and_print_diff('goodInputDatasetLumisDBS', 'processedLumis')

if len(ll_alls) > 1:
    print colors.bold('check overlaps')
    overlaps = False
    for (wda,lla), (wdb,llb) in combinations(ll_alls, 2):
        llaandb = lla & llb
        if llaandb:
            overlaps = True
            print colors.red('A = %s and B = %s have overlap:' % (wda, wdb)), ll2str(llaandb)
    if not overlaps:
        print colors.green('none!')

ll_total_fn = 'processedLumis.json'
if os.path.isfile(ll_total_fn):
    print colors.red('not overwriting %s' % ll_total_fn)
else:
    ll_total = ll_alls.pop()[1]
    for _, ll in ll_alls:
        ll_total |= ll
    ll_total.writeJSON(ll_total_fn)
    print colors.green('%i total lumis written to %s' % (len(ll_total.getLumis()), ll_total_fn))
