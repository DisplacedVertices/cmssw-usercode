#!/usr/bin/env python

import sys, os, glob, argparse
from JMTucker.Tools.CRAB3ToolsSh import is_crab_working_dir, crab_hadd_args, crab_hadd_files, crab_hadd
from JMTucker.Tools.CondorTools import is_cs_dir, cs_hadd_args, cs_hadd_files, cs_hadd
from JMTucker.Tools.general import touch as _touch
from JMTucker.Tools.hadd import HaddlogParser
from JMTucker.Tools import eos, colors

parser = argparse.ArgumentParser(description = 'mhadd: hadd the files from condor/crab directories',
                                 usage = '%(prog)s [options] condor_or_crab_dirs')

parser.add_argument('positional', nargs='*', help='The condor/crab directories.')

parser.add_argument('--chunk_size', default=900, type=int,
                    help='The maximum number files hadded at once.')
parser.add_argument('--pattern',
                    help='Glob-style pattern to filter the files, useful if there are multiple files output per job.')
parser.add_argument('--range',
                    help='(start,stop),step to select which files to use.')
parser.add_argument('--no-lpc-shortcut', action='store_false', dest='lpc_shortcut', default=True,
                    help='(Only for crab dirs) Most of the time files went to FNAL LPC EOS, this is used to bypass talking to the crab server--turn off if needed.')
parser.add_argument('-p', '--ignore-done', '--partial', action='store_true', default=False,
                    help='Ignore the done marker files and try to hadd whatever specified.')
parser.add_argument('--only-notdones', action='store_true', default=False,
                    help='Only do not-dones (implies --overwrite and --ignore-done).')
parser.add_argument('-f', '--overwrite', action='store_true', default=False,
                    help='If the output file exists, overwrite it (really, delete it before hadd ever sees it).')
parser.add_argument('-o', '--output-dir',
                    help='Path for the output files. (Can be an xrootd url, e.g. root://cmseos.fnal.gov//store/user/tucker/outputdir.) If doing dirs of dirs, directories are created under the output dir corresponding to the basenames of the toplevel dirs. If the toplevel dirs are not unique, you will have a bad time.')
parser.add_argument('-r', '--remove-originals', action='store_true', default=False,
                    help='Remove the original files.')
parser.add_argument('-v', '--verbose', action='store_true', default=False,
                    help='Print more info.')

options = parser.parse_args()

if len(options.positional) == 0:
    print 'Required positional args missing: at least one crab directory\n'
    parser.print_help()
    sys.exit(1)

if options.range:
    options.range = [int(x) for x in options.range.split(',')]
    if len(options.range) < 3:
        options.range = [None]*(3-len(options.range)) + options.range
    elif len(options.range) != 3:
        raise ValueError('--range takes maximum 3 args')
        
if options.only_notdones:
    options.ignore_done = True
    options.overwrite = True

########################################################################

wds = options.positional
found_one = False

def hadd_(is_crab, *args, **kwargs):
    global found_one
    found_one = True

    done = True
    working_dir = args[0]
    if not os.path.isfile(os.path.join(working_dir, 'mmon_done')):
        if options.ignore_done:
            done = False
        else:
            print colors.yellow('skipping %s since it is not marked done (--ignore-done to skip this check)' % working_dir)
            return

    kwargs['chunk_size'] = options.chunk_size
    kwargs['pattern'] = options.pattern
    kwargs['range_filter'] = options.range

    if is_crab:
        kwargs['lpc_shortcut'] = options.lpc_shortcut
        hadd_args, hadd_files, hadd = crab_hadd_args, crab_hadd_files, crab_hadd
    else:
        hadd_args, hadd_files, hadd = cs_hadd_args, cs_hadd_files, cs_hadd

    new_dir = kwargs.get('new_dir', None)
    if options.output_dir:
        if new_dir:
            base_new_dir = os.path.basename(new_dir)
            new_dir = os.path.join(options.output_dir, base_new_dir)
        else:
            new_dir = options.output_dir
    kwargs['new_dir'] = new_dir

    working_dir, new_name, new_dir = hadd_args(working_dir, kwargs.get('new_name', None), new_dir)

    on_eos = new_dir and '/store/' in new_dir
    if on_eos:
        exists, mkdir, rm, touch = eos.exists, eos.mkdir, eos.rm, eos.touch
    else:
        exists, mkdir, rm, touch = os.path.exists, os.mkdir, os.remove, _touch

    if new_dir and not exists(new_dir):
        mkdir(new_dir)

    notdone_fn = new_name + '.notdone'
    if options.only_notdones and not os.path.isfile(notdone_fn):
        print colors.yellow('ignoring %s' % new_name)
        return

    if not done:
        touch(notdone_fn)

    if exists(new_name):
        if options.overwrite:
            print colors.yellow('overwriting existing file %s' % new_name)
            rm(new_name)
        else:
            log_fn = new_name + '.haddlog'
            if on_eos:
                log_fn = eos.fusemount(log_fn)
            njobs = hadd_files(working_dir, **kwargs)[0]
            if not exists(log_fn):
                log_njobs = 1 # assume 1 file copied
            else:
                p = HaddlogParser(log_fn)
                log_njobs = p.num_sources
            if log_njobs != njobs:
                print colors.boldred('skipping existing file %s (for which num sources %i != njobs %i)' % (new_name, log_njobs, njobs))
            else:
                if options.verbose:
                    print colors.yellow('skipping existing file %s (which looks complete by njobs and haddlog)' % new_name)
            return

    result = hadd(*args, **kwargs)

    if options.remove_originals and result.success:
        for fn in result.files:
            if os.path.isfile(fn):
                os.remove(fn)
            else:
                print 'dunno how to rm', fn


for x in wds:
    is_crab = is_crab_working_dir(x)
    if is_crab or is_cs_dir(x):
        hadd_(is_crab, x)
    elif os.path.isdir(x):
        # if we have a dir of condor/crab dirs, cs/crab_hadd all the directories in it.
        for d in glob.glob(os.path.join(x, '*')):
            is_crab = is_crab_working_dir(d)
            if is_crab or is_cs_dir(d):
                hadd_(is_crab, d, new_dir=x)

if not found_one:
    raise ValueError('no condor/crab dirs found in argv')
